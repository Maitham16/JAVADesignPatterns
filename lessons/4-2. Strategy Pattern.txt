The Strategy pattern is used when we have multiple algorithm for a specific task and client 
decides the actual implementation to be used at runtime.

Strategy pattern is also known as Policy Pattern. We defines multiple algorithms and let client
application pass the algorithm to be used as a parameter.

    // Strategy interface
    interface PaymentStrategy {
        public void pay(int amount);
    }

    class CreditCardPaymentStrategy implements PaymentStrategy {
        @Override
        public void pay(int amount) {
            System.out.println(amount +" paid using Credit Card.");
        }
    }

    class PaypalPaymentStrategy implements PaymentStrategy {
        @Override
        public void pay(int amount) {
            System.out.println(amount +" paid using Paypal.");
        }
    }

    // Context
    class ShoppingCart {
        // list of items
        // add items to cart
        // remove items from cart

        public void pay(PaymentStrategy paymentMethod){
            int amount = calculateTotal();
            paymentMethod.pay(amount);
        }
    }

Here, PaymentStrategy is a strategy interface, CreditCardPaymentStrategy and 
PaypalPaymentStrategy are concrete strategies, and ShoppingCart is a context.
