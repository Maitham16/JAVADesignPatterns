The Decorator pattern allows a user to add new functionality to an existing object without 
altering its structure. This type of design pattern comes under structural pattern as this 
pattern acts as a wrapper to the existing class.

This pattern creates a decorator class which wraps the original class and provides additional
functionality keeping class methods signature intact.

    interface Coffee {
        double getCost(); 
        String getIngredients();
    }

    class SimpleCoffee implements Coffee {
        @Override
        public double getCost() {
            return 1;
        }

        @Override
        public String getIngredients() {
            return "Coffee";
        }
    }

    class CoffeeDecorator implements Coffee {
        protected final Coffee decoratedCoffee;

        CoffeeDecorator(Coffee c) {
            this.decoratedCoffee = c;
        }

        @Override
        public double getCost() {
            return decoratedCoffee.getCost();
        }

        @Override
        public String getIngredients() {
            return decoratedCoffee.getIngredients();
        }
    }

    class WithMilk extends CoffeeDecorator {
        WithMilk(Coffee c) {
            super(c);
        }

        @Override
        public double getCost() {
            return super.getCost() + 0.5;
        }

        @Override
        public String getIngredients() {
            return super.getIngredients() + ", Milk";
        }
    }