Composite pattern is used where we need to treat a group of objects in a similar way as a 
single object. It composes objects in term of a tree structure to represent part as well as 
whole hierarchy. This type of design pattern comes under structural pattern as this pattern 
creates a tree structure of group of objects.

    interface Component {
        void showPrice();
    }

    class Leaf implements Component {
        String name;
        int price;
        
        public Leaf(String name, int price) {
            this.name = name;
            this.price = price;
        }
        
        public void showPrice() {
            System.out.println(name + ": " + price);
        }
    }

    class Composite implements Component {
        String name;
        List<Component> components = new ArrayList<>();
        
        public Composite(String name) {
            this.name = name;
        }
        
        public void addComponent(Component component) {
            components.add(component);
        }
        
        public void showPrice() {
            System.out.println(name);
            for(Component c : components) {
                c.showPrice();
            }
        }
    }

In this example, Leaf is the primitive object and Composite is the object having Leaf objects. 
The Composite object adds the Leaf objects and defines the interface that is implemented by Leaf.
