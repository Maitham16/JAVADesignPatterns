The Observer pattern is used when there is one-to-many relationship between objects such as 
if one object is modified, its dependent objects are to be notified automatically.

Observer pattern falls under behavioral pattern category.

// Observable class
class NewsAgency {
    private String news;
    private List<Channel> channels = new ArrayList<>();

    public void addObserver(Channel channel) {
        this.channels.add(channel);
    }

    public void setNews(String news) {
        this.news = news;
        for (Channel channel : this.channels) {
            channel.update(this.news);
        }
    }
}

// Observer interface
interface Channel {
    void update(Object o);
}

class NewsChannel implements Channel {
    private String news;

    @Override
    public void update(Object news) {
        this.news = (String) news;
    }
}

public class ObserverPattern {
    public static void main(String[] args) {
        NewsAgency observable = new NewsAgency();
        NewsChannel observer = new NewsChannel();
        observable.addObserver(observer);
        observable.setNews("news");
    }
}

// Output
// observer.news = "news"