Facade pattern hides the complexities of the system and provides an interface to the client 
using which the client can access the system. This type of design pattern comes under 
structural pattern as this pattern adds an interface to existing system to hide its 
complexities.

    class CPU {
        public void freeze() { /* complex actions */ }
        public void jump(long position) { /* complex actions */ }
        public void execute() { /* complex actions */ }
    }

    class Memory {
        public void load(long position, byte[] data) { /* complex actions */ }
    }

    class HardDrive {
        public byte[] read(long lba, int size) { /* complex actions */ return new byte[0]; }
    }

    /* Facade */
    class ComputerFacade {
        private CPU processor;
        private Memory ram;
        private HardDrive hd;

        public ComputerFacade() {
            this.processor = new CPU();
            this.ram = new Memory();
            this.hd = new HardDrive();
        }

        public void start() {
            processor.freeze();
            ram.load(BOOT_ADDRESS, hd.read(BOOT_SECTOR, SECTOR_SIZE));
            processor.jump(BOOT_ADDRESS);
            processor.execute();
        }
    }

    /* Client */
    public class You {
        public static void main(String[] args) {
            ComputerFacade computer = new ComputerFacade();
            computer.start();
        }
    }

Here, ComputerFacade is the facade class that simplifies the interface for starting a 
computer. Clients like You don't need to understand the subsystems like CPU, Memory, 
and HardDrive to start the computer.
