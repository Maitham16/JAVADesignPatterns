The Proxy pattern provides a surrogate or placeholder for another object to control access 
to it. A proxy, in its most general form, is a class functioning as an interface to something 
else.

    interface Image {
        void display();
    }

    class RealImage implements Image {
        private String filename;

        RealImage(String filename) {
            this.filename = filename;
            loadFromDisk();
        }

        private void loadFromDisk() {
            System.out.println("Loading " + filename);
        }

        @Override
        public void display() {
            System.out.println("Displaying " + filename);
        }
    }

    class ProxyImage implements Image {
        private RealImage realImage;
        private String filename;

        ProxyImage(String filename) {
            this.filename = filename;
        }

        @Override
        public void display() {
            if (realImage == null) {
                realImage = new RealImage(filename);
            }
            realImage.display();
        }
    }